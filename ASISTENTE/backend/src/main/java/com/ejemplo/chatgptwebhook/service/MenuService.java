package com.ejemplo.chatgptwebhook.service;

import com.ejemplo.chatgptwebhook.model.MenuOption;
import com.ejemplo.chatgptwebhook.model.MenuResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Servicio para gestionar las opciones del men√∫ principal (versi√≥n web √∫nicamente)
 */
@Service
public class MenuService {
    
    private static final Logger logger = LoggerFactory.getLogger(MenuService.class);
    
    // Mapa para almacenar el estado de las sesiones del men√∫ (do-while)
    private final Map<String, Boolean> sesionesActivas = new ConcurrentHashMap<>();
    private final Map<String, Integer> contadorInteracciones = new ConcurrentHashMap<>();
    
    // Mapa para almacenar el contexto del proyecto por sesi√≥n
    private final Map<String, String> contextoyProyectoSesion = new ConcurrentHashMap<>();
    private final Map<String, String> nombreProyectoSesion = new ConcurrentHashMap<>();
    private final Map<String, String> tareasProyectoSesion = new ConcurrentHashMap<>();
    private final Map<String, Set<Integer>> tareasCompletadasSesion = new ConcurrentHashMap<>();
    
    // Inyecci√≥n del servicio de ChatGPT
    @Autowired
    private ChatGptService chatGptService;
    
    /**
     * Obtiene las opciones del men√∫ principal (Versi√≥n web que usa mostrarMenuPrincipal)
     * Implementa bucle do-while para mantener el men√∫ activo hasta que el usuario seleccione "salir"
     * 
     * @param sessionId ID de sesi√≥n para controlar el bucle do-while
     * @return MenuResponse con todas las opciones disponibles
     */
    public MenuResponse obtenerOpcionesMenu(String sessionId) {
        
        // Crear las opciones del men√∫
        List<MenuOption> opciones = Arrays.asList(
            new MenuOption(1, "Crear un proyecto", "crear_proyecto"),
            new MenuOption(2, "Crear las tareas del proyecto", "crear_tareas"),
            new MenuOption(3, "Consultar tareas del proyecto", "consultar_tareas"),
            new MenuOption(4, "Salir", "salir")
        );
        
        // Si es la primera vez, inicializar como activa
        if (!sesionesActivas.containsKey(sessionId)) {
            sesionesActivas.put(sessionId, true);
        }
        
        String estado ="activo";
        String titulo = "Men√∫ Principal - Gesti√≥n de Proyectos";
        
        MenuResponse menuResponse = new MenuResponse(titulo, opciones, estado);

        return menuResponse;
        
    }
    
    /**
     * Sobrecarga del m√©todo para compatibilidad
     */
    public MenuResponse obtenerOpcionesMenu() {
        // Generar una sesi√≥n por defecto
        String sessionId = "default_" + System.currentTimeMillis();
        return obtenerOpcionesMenu(sessionId);
    }
    
    /**
     * Obtiene una opci√≥n espec√≠fica del men√∫ por su ID
     * 
     * @param id El ID de la opci√≥n a buscar
     * @return MenuOption si se encuentra, null en caso contrario
     */
    public MenuOption obtenerOpcionPorId(int id) {
        logger.info("Buscando opci√≥n del men√∫ con ID: {}", id);
        
        List<MenuOption> opciones = obtenerOpcionesMenu().getOpciones();
        
        return opciones.stream()
                .filter(opcion -> opcion.getId() == id)
                .findFirst()
                .orElse(null);
    }
    
    /**
     * Valida si una opci√≥n del men√∫ es v√°lida
     * 
     * @param id El ID de la opci√≥n a validar
     * @return true si la opci√≥n es v√°lida, false en caso contrario
     */
    public boolean esOpcionValida(int id) {
        logger.info("Validando opci√≥n del men√∫ con ID: {}", id);
        return obtenerOpcionPorId(id) != null;
    }
    
    /**
     * Versi√≥n web de procesarOpcion que devuelve una respuesta JSON en lugar de interactuar con consola
     * Controla el bucle do-while cuando se selecciona "salir"
     * 
     * @param opcion La opci√≥n seleccionada por el usuario
     * @param sessionId ID de sesi√≥n para controlar el bucle do-while
     * @return String con la respuesta de la acci√≥n ejecutada
     */
    public String procesarOpcionWeb(int opcion, String sessionId) {
       
        switch (opcion) {
            case 1:
                return crearProyectoWebConSesion(sessionId);
                
            case 2:
                return crearTareasProyectoWebConSesion(sessionId);
                
            case 3:
                return consultarTareasProyectoWebConSesion(sessionId);
                
            case 4:
                // Finalizar el bucle do-while para esta sesi√≥n
                return salirWebConSesion(sessionId);
                
            default:
                logger.warn("Opci√≥n inv√°lida seleccionada desde web para sesi√≥n {}: {}", sessionId, opcion);
                return "‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n del 1 al 4.";
        }
    }
    
    /**
     * Sobrecarga del m√©todo para compatibilidad
     */
    public String procesarOpcionWeb(int opcion) {
        String sessionId = "default_" + System.currentTimeMillis();
        return procesarOpcionWeb(opcion, sessionId);
    }
    
    /**
     * Versi√≥n web de procesarOpcion con datos espec√≠ficos
     * 
     * @param opcion La opci√≥n seleccionada por el usuario
     * @param datos Los datos espec√≠ficos para la opci√≥n (puede ser null)
     * @return String con la respuesta de la acci√≥n ejecutada
     */
    public String procesarOpcionWebConDatos(int opcion, String datos) {
        logger.info("Procesando opci√≥n {} con datos: {}", opcion, datos);
        
        switch (opcion) {
            case 1:
                return crearProyectoWebConDatos(datos);
                
            case 2:
                return crearTareasProyectoWebConDatos(datos);
                
            case 3:
                return consultarTareasProyectoWebConDatos(datos);
                
            case 4:
                return salirWeb();
                
            default:
                logger.warn("Opci√≥n inv√°lida seleccionada desde web: {}", opcion);
                return "‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n del 1 al 4.";
        }
    }
    
    /**
     * Versi√≥n web de procesarOpcion con datos espec√≠ficos y sesi√≥n
     * 
     * @param opcion La opci√≥n seleccionada por el usuario
     * @param datos Los datos espec√≠ficos para la opci√≥n (puede ser null)
     * @param sessionId ID de sesi√≥n para mantener contexto
     * @return String con la respuesta de la acci√≥n ejecutada
     */
    public String procesarOpcionWebConDatosYSesion(int opcion, String datos, String sessionId) {
        
        switch (opcion) {
            case 1:
                return crearProyectoWebConDatosYSesion(datos, sessionId);
                
            case 2:
                return crearTareasProyectoWebConDatosYSesion(datos, sessionId);
                
            case 3:
                return consultarTareasProyectoWebConDatosYSesion(datos, sessionId);
                
            case 4:
                return salirWebConSesion(sessionId);
                
            default:
                logger.warn("Opci√≥n inv√°lida seleccionada desde web: {}", opcion);
                return "‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n del 1 al 4.";
        }
    }
    
    /**
     * Versi√≥n web de crear proyecto que solicita la idea al usuario
     */
    private String crearProyectoWebConSesion(String sessionId) {
        
        // No enviar a ChatGPT inmediatamente, solo solicitar la idea del proyecto
        return "üöÄ **CREAR NUEVO PROYECTO**\n\n" +
               "¬°Perfecto! Vamos a crear un nuevo proyecto juntos.\n\n" +
               "üí° **Para comenzar, necesito que me cuentes:**\n" +
               "‚Ä¢ ¬øCu√°l es tu idea de proyecto?\n" +
               "‚Ä¢ ¬øQu√© problema quieres resolver?\n" +
               "‚Ä¢ ¬øQu√© tipo de proyecto tienes en mente?\n\n" +
               "‚úçÔ∏è **Escribe tu idea del proyecto** y te ayudar√© a desarrollarla con todos los detalles necesarios.";
    }
    
    /**
     * Versi√≥n web de crear proyecto con datos espec√≠ficos (idea del usuario)
     */
    private String crearProyectoWebConDatos(String datos) {
        logger.info("Procesando idea del proyecto: {}", datos);
        
        if (datos == null || datos.trim().isEmpty()) {
            return "‚ùå **Error:** No se proporcion√≥ una idea de proyecto.\n\n" +
                   "Por favor, describe tu idea de proyecto para poder ayudarte a desarrollarla.";
        }
        
        String ideaProyecto = datos.trim();
        logger.info("üí° Idea del proyecto recibida: {}", ideaProyecto);
        
        // Ahora s√≠ enviar a ChatGPT con la idea del usuario usando sesi√≥n por defecto
        return procesarIdeaProyectoConChatGPT(ideaProyecto, "default_session");
    }
    
    /**
     * Versi√≥n web de crear proyecto con datos espec√≠ficos y sesi√≥n (idea del usuario)
     */
    private String crearProyectoWebConDatosYSesion(String datos, String sessionId) {
        
        if (datos == null || datos.trim().isEmpty()) {
            return "‚ùå **Error:** No se proporcion√≥ una idea de proyecto.\n\n" +
                   "Por favor, describe tu idea de proyecto para poder ayudarte a desarrollarla.";
        }
        
        String ideaProyecto = datos.trim();
        logger.info("üí° Idea del proyecto recibida: {} para sesi√≥n: {}", ideaProyecto, sessionId);
        
        // Ahora s√≠ enviar a ChatGPT con la idea del usuario usando la sesi√≥n espec√≠fica
        return procesarIdeaProyectoConChatGPT(ideaProyecto, sessionId);
    }
    
    /**
     * Procesa la idea del proyecto con ChatGPT y guarda el contexto
     */
    private String procesarIdeaProyectoConChatGPT(String ideaProyecto, String sessionId) {
        try {
            // Construir mensaje espec√≠fico para ChatGPT con la idea del usuario
            String mensajeParaChatGPT = String.format(
                "El usuario tiene la siguiente idea de proyecto: \"%s\"\n\n" +
                "Eres un experto en arquitectura de software de proyectos. Por favor, ay√∫dalo a desarrollar y definir completamente este proyecto. " +
                "Proporciona 10 tareas principales que se deben realizar para desarrollar este proyecto:\n" +
                "Las tareas deben ser espec√≠ficas y detalladas, y deben ser realizadas en orden cronol√≥gico.\n" +
                "Al final, indica claramente cu√°l ser√≠a el nombre espec√≠fico del proyecto para usarlo como referencia.",
                ideaProyecto
            );
            
            logger.info("ü§ñ Enviando idea del proyecto a ChatGPT para sesi√≥n: {}", sessionId);
            
            // Usar m√°s tokens para respuestas largas de ChatGPT
            String respuestaChatGPT = chatGptService.enviarMensajeConTokens(mensajeParaChatGPT, 3000).block();
            
            // Guardar el contexto completo de la respuesta
            contextoyProyectoSesion.put(sessionId, respuestaChatGPT);
            
            // Intentar extraer el nombre del proyecto de la respuesta
            String nombreProyecto = extraerNombreProyecto(respuestaChatGPT);
            if (nombreProyecto != null && !nombreProyecto.isEmpty()) {
                nombreProyectoSesion.put(sessionId, nombreProyecto);
                logger.info("üìù Proyecto guardado en sesi√≥n {}: {}", sessionId, nombreProyecto);
            }
            
            // Extraer y guardar las tareas del proyecto
            String tareasExtraidas = extraerTareasProyecto(respuestaChatGPT);
            if (tareasExtraidas != null && !tareasExtraidas.isEmpty()) {
                tareasProyectoSesion.put(sessionId, tareasExtraidas);
                logger.info("üìã Tareas guardadas en sesi√≥n {}: {} tareas encontradas", sessionId, contarTareas(tareasExtraidas));
            }
            
            logger.info("‚úÖ Respuesta recibida de ChatGPT para idea de proyecto y contexto guardado");
            
            return "üöÄ **PROYECTO DESARROLLADO**\n\n" + respuestaChatGPT + "\n\n" +
                   "‚úÖ **Proyecto creado exitosamente**\n" +
                   "üéØ **Siguiente paso:** Puedes gestionar las tareas usando las opciones del men√∫ principal\n\n" +
                   "MOSTRAR_MENU_PRINCIPAL";
            
        } catch (Exception e) {
            logger.error("‚ùå Error al comunicarse con ChatGPT para procesar idea de proyecto", e);
            return "üöÄ **DESARROLLO DE PROYECTO**\n\n" +
                   "‚ùå **Error de conexi√≥n con la API de OpenAI**\n\n" +
                   "üí° **Tu idea de proyecto:** " + ideaProyecto + "\n\n" +
                   "**Posibles causas del error:**\n" +
                   "‚Ä¢ API key de OpenAI incorrecta o expirada\n" +
                   "‚Ä¢ Problemas de conectividad\n" +
                   "‚Ä¢ L√≠mite de uso de la API alcanzado\n\n" +
                   "**Gu√≠a b√°sica para desarrollar tu proyecto:**\n" +
                   "1. Define el objetivo principal de tu idea\n" +
                   "2. Identifica tu p√∫blico objetivo\n" +
                   "3. Establece un presupuesto estimado\n" +
                   "4. Define las fechas de inicio y fin\n" +
                   "5. Crea la lista de caracter√≠sticas principales\n\n" +
                   "üîß **Para solucionar:** Verifica la configuraci√≥n de la API key en el backend\n\n" +
                   "MOSTRAR_MENU_PRINCIPAL";
        }
    }
    
    /**
     * Versi√≥n web de gestionar tareas que muestra las existentes y permite agregar nuevas
     */
    private String crearTareasProyectoWebConSesion(String sessionId) {
        
        // Verificar si hay tareas y proyecto en la sesi√≥n
        String tareasExistentes = tareasProyectoSesion.get(sessionId);
        String nombreProyecto = nombreProyectoSesion.get(sessionId);
        
        if (tareasExistentes != null && !tareasExistentes.isEmpty()) {
            // Hay tareas en la sesi√≥n, mostrarlas y pedir nueva tarea
            String tituloProyecto = nombreProyecto != null ? nombreProyecto : "Proyecto definido anteriormente";
            int numeroTareas = contarTareas(tareasExistentes);
            
           
            return String.format(
                "üìã **GESTI√ìN DE TAREAS: %s**\n\n" +
                "üìä **Tareas actuales:** %d tareas\n\n" +
                "**Lista de tareas:**\n%s\n\n" +
                "‚ûï **AGREGAR NUEVA TAREA**\n\n" +
                "üí° **Para agregar una nueva tarea:**\n" +
                "‚úçÔ∏è Escribe la descripci√≥n de la nueva tarea que quieres agregar al proyecto.\n\n" +
                "üìù **Ejemplo:** \"Configurar base de datos PostgreSQL\" o \"Implementar sistema de autenticaci√≥n\"\n\n" +
                "üîÑ **La nueva tarea se agregar√° autom√°ticamente a la lista existente.**",
                tituloProyecto, numeroTareas, tareasExistentes
            );
            
        } else {
            // No hay tareas, verificar si hay contexto del proyecto
            String contextoProyecto = contextoyProyectoSesion.get(sessionId);
            
            if (contextoProyecto != null && !contextoProyecto.isEmpty()) {
                // Hay contexto pero no tareas (caso raro), solicitar primera tarea
                String tituloProyecto = nombreProyecto != null ? nombreProyecto : "Proyecto definido anteriormente";
                
                return String.format(
                    "üìã **CREAR PRIMERA TAREA: %s**\n\n" +
                    "üéØ **Proyecto definido pero sin tareas.**\n\n" +
                    "‚ûï **Para comenzar, agrega la primera tarea:**\n" +
                    "‚úçÔ∏è Escribe la descripci√≥n de la primera tarea para este proyecto.\n\n" +
                    "üìù **Ejemplo:** \"Definir requisitos del proyecto\" o \"Configurar entorno de desarrollo\"\n\n" +
                    "üîÑ **Esta ser√° la primera tarea de tu proyecto.**",
                    tituloProyecto
                );
            } else {
                // No hay contexto ni tareas
                return "üìã **GESTI√ìN DE TAREAS DEL PROYECTO**\n\n" +
                       "‚ùó **No hay proyecto definido en esta sesi√≥n.**\n\n" +
                       "üí° **Para gestionar tareas:**\n" +
                       "1. Primero selecciona **'1. Crear un proyecto'** para definir tu proyecto\n" +
                       "2. El sistema generar√° autom√°ticamente las tareas iniciales\n" +
                       "3. Despu√©s podr√°s agregar m√°s tareas usando esta opci√≥n\n\n";
            }
        }
    }
    
    /**
     * Versi√≥n web de crear tareas con datos espec√≠ficos y sesi√≥n espec√≠fica
     */
    private String crearTareasProyectoWebConDatosYSesion(String datos, String sessionId) {
        logger.info("üìã Procesando datos de tarea: {} - sesi√≥n: {}", datos, sessionId);
        
        // Si hay datos espec√≠ficos, agregar como nueva tarea
        if (datos != null && !datos.trim().isEmpty()) {
            return agregarNuevaTareaASesion(datos.trim(), sessionId);
        }
        
        // Si no hay datos espec√≠ficos, mostrar gesti√≥n de tareas
        return crearTareasProyectoWebConSesion(sessionId);
    }
    
    /**
     * Versi√≥n web de crear tareas con datos espec√≠ficos - env√≠a a ChatGPT
     */
    private String crearTareasProyectoWebConDatos(String datos) {
        logger.info("üìã Creando tareas para proyecto con datos: {}", datos);
        
        String nombreProyecto = datos != null && !datos.trim().isEmpty() ? datos : "Proyecto sin nombre";
        
        try {
            // Construir mensaje espec√≠fico para ChatGPT
            String mensajeParaChatGPT = String.format(
                "Tengo un proyecto llamado '%s'. " +
                "Por favor, proporciona las 10 tareas principales que debo realizar para desarrollar este proyecto. " +
                "Enumera cada tarea de forma clara y espec√≠fica, del 1 al 10.",
                nombreProyecto
            );
            
            // Usar m√°s tokens para respuestas largas de ChatGPT
            String respuestaChatGPT = chatGptService.enviarMensajeConTokens(mensajeParaChatGPT, 3000).block();
            
            
            return String.format(
                "üìã **TAREAS DEL PROYECTO: %s**\n\n" +
                "ü§ñ **Tareas generadas por el sistema:**\n\n%s\n\n" +
                "‚úÖ **Tareas creadas exitosamente**\n" +
                "üí° **Siguiente paso:** Puedes usar las opciones del men√∫ para gestionar estas tareas\n\n" +
                "MOSTRAR_MENU_PRINCIPAL",
                nombreProyecto, respuestaChatGPT
            );
            
        } catch (Exception e) {
            logger.error("‚ùå Error al comunicarse con ChatGPT para generar tareas", e);
            
            return String.format(
                "üìã **TAREAS DEL PROYECTO: %s**\n\n" +
                "‚ùå No pude conectar con ChatGPT en este momento.\n\n" +
                "üí° **Tareas b√°sicas sugeridas:**\n" +
                "1. Definir requisitos del proyecto\n" +
                "2. Crear plan de trabajo\n" +
                "3. Asignar responsabilidades\n" +
                "4. Establecer cronograma\n" +
                "5. Configurar entorno de desarrollo\n" +
                "6. Dise√±ar arquitectura del sistema\n" +
                "7. Implementar funcionalidades core\n" +
                "8. Realizar pruebas\n" +
                "9. Documentar el proyecto\n" +
                "10. Desplegar y entregar\n\n" +
                "MOSTRAR_MENU_PRINCIPAL",
                nombreProyecto
            );
        }
    }
    
    
    /**
     * Versi√≥n web de consultar tareas con sesi√≥n espec√≠fica
     */
    private String consultarTareasProyectoWebConSesion(String sessionId) {
        
        // Verificar si hay tareas guardadas en la sesi√≥n
        String tareasGuardadas = tareasProyectoSesion.get(sessionId);
        String nombreProyecto = nombreProyectoSesion.get(sessionId);
        
        if (tareasGuardadas != null && !tareasGuardadas.isEmpty()) {
            String tituloProyecto = nombreProyecto != null ? nombreProyecto : "Proyecto definido anteriormente";
            int numeroTareas = contarTareas(tareasGuardadas);
            
            // Obtener tareas completadas para esta sesi√≥n
            Set<Integer> tareasCompletadas = tareasCompletadasSesion.getOrDefault(sessionId, new HashSet<>());
            
            // Formatear lista de tareas con estado
            String tareasConEstado = formatearTareasConEstado(tareasGuardadas, tareasCompletadas);
            
            // Contar tareas completadas y pendientes
            int tareasCompletadasCount = tareasCompletadas.size();
            int tareasPendientes = numeroTareas - tareasCompletadasCount;
            
            logger.info("‚úÖ Tareas encontradas en sesi√≥n {}: {} tareas ({} completadas, {} pendientes) para proyecto '{}'", 
                       sessionId, numeroTareas, tareasCompletadasCount, tareasPendientes, tituloProyecto);
            
            return String.format(
                "üìã **CONSULTAR TAREAS: %s**\n\n" +
                "üìä **Progreso:** %d/%d tareas completadas (%.1f%%)\n" +
                "‚úÖ **Completadas:** %d | ‚è≥ **Pendientes:** %d\n\n" +
                "**Lista de tareas:**\n%s\n\n" +
                "üéØ **MARCAR TAREA COMO COMPLETADA**\n\n" +
                "üí° **Para completar una tarea:**\n" +
                "‚úçÔ∏è Escribe el **n√∫mero de la tarea** que has completado.\n\n" +
                "üìù **Ejemplo:** Escribe \"3\" para marcar la tarea #3 como completada\n\n" +
                "üîÑ **El estado se actualizar√° autom√°ticamente en tu proyecto.**",
                tituloProyecto, 
                tareasCompletadasCount, numeroTareas, 
                numeroTareas > 0 ? (tareasCompletadasCount * 100.0 / numeroTareas) : 0.0,
                tareasCompletadasCount, tareasPendientes,
                tareasConEstado
            );
        } else {
            // No hay tareas en la sesi√≥n
            return "üìã **CONSULTAR TAREAS DEL PROYECTO**\n\n" +
                   "‚ùó **No hay tareas guardadas en esta sesi√≥n.**\n\n" +
                   "üí° **Para consultar tareas:**\n" +
                   "1. Primero selecciona **'1. Crear un proyecto'** para definir tu proyecto con ChatGPT\n" +
                   "2. El sistema generar√° autom√°ticamente las 10 tareas principales\n" +
                   "3. Despu√©s podr√°s consultar las tareas generadas\n\n" +
                   "üîÑ **Alternativamente:**\n" +
                   "Puedes usar el endpoint `POST /api/menu/procesar/3/datos` con el nombre espec√≠fico del proyecto.";
        }
    }
    
    /**
     * Versi√≥n web de consultar tareas con datos espec√≠ficos y sesi√≥n espec√≠fica
     */
    private String consultarTareasProyectoWebConDatosYSesion(String datos, String sessionId) {
        logger.info("Procesando n√∫mero de tarea: {} - sesi√≥n: {}", datos, sessionId);
        
        // Si hay datos espec√≠ficos, intentar marcar tarea como completada
        if (datos != null && !datos.trim().isEmpty()) {
            try {
                int numeroTarea = Integer.parseInt(datos.trim());
                return marcarTareaComoCompletada(numeroTarea, sessionId);
            } catch (NumberFormatException e) {
                return "‚ùå **Error:** Por favor ingresa un n√∫mero v√°lido de tarea.\n\n" +
                       "üìù **Ejemplo:** Escribe \"3\" para marcar la tarea #3 como completada.\n\n" +
                       "MOSTRAR_MENU_PRINCIPAL";
            }
        }
        
        // Si no hay datos espec√≠ficos, mostrar lista de tareas
        return consultarTareasProyectoWebConSesion(sessionId);
    }
    
    /**
     * Versi√≥n web de consultar tareas con datos espec√≠ficos
     */
    private String consultarTareasProyectoWebConDatos(String datos) {
        logger.info("Consultando tareas con datos: {}", datos);
        
        String nombreProyecto = datos != null ? datos : "Proyecto por defecto";
        
        // Aqu√≠ se implementar√≠a la l√≥gica real para consultar las tareas
        // Por ejemplo, buscar en base de datos
        
        logger.info("Consulta de tareas realizada desde web para proyecto: {}", nombreProyecto);
        
        return "üìä Tareas del proyecto '" + nombreProyecto + "':\n" +
               "----------------------------------------\n" +
               "1. Tarea de ejemplo 1 - Prioridad: Alta - Estado: En progreso\n" +
               "2. Tarea de ejemplo 2 - Prioridad: Media - Estado: Completada\n" +
               "3. Tarea de ejemplo 3 - Prioridad: Baja - Estado: Pendiente\n\n" +
               "üìà Resumen:\n" +
               "   ‚Ä¢ Total de tareas: 3\n" +
               "   ‚Ä¢ Completadas: 1\n" +
               "   ‚Ä¢ En progreso: 1\n" +
               "   ‚Ä¢ Pendientes: 1\n\n" +
               "MOSTRAR_MENU_PRINCIPAL";
    }
    
    /**
     * Versi√≥n web de salir
     */
    private String salirWeb() {
        logger.info("Usuario ha salido del sistema desde web");
        return "üëã ¬°Gracias por usar el sistema de gesti√≥n de proyectos! ¬°Hasta luego!";
    }
    
    /**
     * Versi√≥n web de salir que controla el bucle do-while
     */
    private String salirWebConSesion(String sessionId) {
        logger.info("Usuario ha salido del sistema desde web - sesi√≥n: {}", sessionId);
        
        // Finalizar el bucle do-while para esta sesi√≥n
        finalizarSesion(sessionId);
        
        return "üëã ¬°Gracias por usar el sistema de gesti√≥n de proyectos! " +
               "¬°Hasta luego! (Sesi√≥n " + sessionId + " finalizada)";
    }
    
    /**
     * Finaliza una sesi√≥n del men√∫ (termina el bucle do-while)
     */
    public void finalizarSesion(String sessionId) {
        logger.info("Finalizando sesi√≥n del men√∫: {}", sessionId);
        sesionesActivas.put(sessionId, false);
        
        // Limpiar datos de la sesi√≥n despu√©s de un tiempo
        new Thread(() -> {
            try {
                Thread.sleep(30000); // Esperar 30 segundos
                sesionesActivas.remove(sessionId);
                contadorInteracciones.remove(sessionId);
                contextoyProyectoSesion.remove(sessionId);
                nombreProyectoSesion.remove(sessionId);
                tareasProyectoSesion.remove(sessionId);
                tareasCompletadasSesion.remove(sessionId);
                logger.info("Datos de sesi√≥n {} limpiados (incluyendo contexto del proyecto, tareas y estado)", sessionId);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }).start();
    }
    
    /**
     * Verifica si una sesi√≥n est√° activa (para el bucle do-while)
     */
    public boolean esSesionActiva(String sessionId) {
        return sesionesActivas.getOrDefault(sessionId, true);
    }
    
    /**
     * Obtiene el n√∫mero de interacciones de una sesi√≥n
     */
    public int getInteraccionesSesion(String sessionId) {
        return contadorInteracciones.getOrDefault(sessionId, 0);
    }
    
    /**
     * Reinicia una sesi√≥n del men√∫ (reinicia el bucle do-while)
     */
    public void reiniciarSesion(String sessionId) {
        logger.info("Reiniciando sesi√≥n del men√∫: {}", sessionId);
        sesionesActivas.put(sessionId, true);
        contadorInteracciones.put(sessionId, 0);
        // Limpiar tambi√©n el contexto del proyecto, tareas y estado
        contextoyProyectoSesion.remove(sessionId);
        nombreProyectoSesion.remove(sessionId);
        tareasProyectoSesion.remove(sessionId);
        tareasCompletadasSesion.remove(sessionId);
    }
    
    /**
     * Extrae el nombre del proyecto de la respuesta de ChatGPT
     */
    private String extraerNombreProyecto(String respuestaChatGPT) {
        // Intentar extraer el nombre del proyecto de la respuesta
        // Buscar patrones comunes como "proyecto llamado", "nombre del proyecto", etc.
        
        if (respuestaChatGPT == null || respuestaChatGPT.isEmpty()) {
            return null;
        }
        
        // Patrones para buscar el nombre del proyecto
        String[] patrones = {
            "proyecto llamado \"([^\"]+)\"",
            "proyecto: ([^\n]+)",
            "nombre del proyecto: ([^\n]+)",
            "proyecto \"([^\"]+)\"",
            "llamado \"([^\"]+)\"",
            "proyecto ([A-Z][^,.\\n]+)"
        };
        
        for (String patron : patrones) {
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(patron);
            java.util.regex.Matcher matcher = pattern.matcher(respuestaChatGPT);
            if (matcher.find()) {
                String nombreEncontrado = matcher.group(1).trim();
                if (!nombreEncontrado.isEmpty()) {
                    logger.info("üìù Nombre del proyecto extra√≠do: {}", nombreEncontrado);
                    return nombreEncontrado;
                }
            }
        }
        
        logger.info("üìù No se pudo extraer el nombre del proyecto autom√°ticamente");
        return "Proyecto definido con ChatGPT";
    }
    
    /**
     * Extrae las tareas del proyecto de la respuesta de ChatGPT
     */
    private String extraerTareasProyecto(String respuestaChatGPT) {
        if (respuestaChatGPT == null || respuestaChatGPT.isEmpty()) {
            return null;
        }
        
        // Buscar patrones de tareas numeradas (1., 2., 3., etc.)
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(
            "(?:^|\\n)(\\d+\\.\\s+[^\\n]+(?:\\n(?!\\d+\\.).*)*)", 
            java.util.regex.Pattern.MULTILINE | java.util.regex.Pattern.DOTALL
        );
        
        java.util.regex.Matcher matcher = pattern.matcher(respuestaChatGPT);
        StringBuilder tareasEncontradas = new StringBuilder();
        
        while (matcher.find()) {
            String tarea = matcher.group(1).trim();
            if (!tarea.isEmpty()) {
                tareasEncontradas.append(tarea).append("\n");
            }
        }
        
        String tareas = tareasEncontradas.toString().trim();
        
        if (!tareas.isEmpty()) {
            logger.info("üìã Tareas extra√≠das exitosamente de la respuesta de ChatGPT");
            return tareas;
        }
        
        logger.info("üìã No se pudieron extraer tareas numeradas, guardando respuesta completa");
        return respuestaChatGPT; // Si no se encuentran tareas numeradas, guardar toda la respuesta
    }
    
    /**
     * Cuenta el n√∫mero de tareas en el texto de tareas
     */
    private int contarTareas(String tareas) {
        if (tareas == null || tareas.isEmpty()) {
            return 0;
        }
        
        // Contar l√≠neas que empiezan con n√∫mero seguido de punto
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("^\\d+\\.", java.util.regex.Pattern.MULTILINE);
        java.util.regex.Matcher matcher = pattern.matcher(tareas);
        
        int contador = 0;
        while (matcher.find()) {
            contador++;
        }
        
        return contador;
    }
    
    /**
     * Formatea las tareas con su estado (completada/pendiente)
     */
    private String formatearTareasConEstado(String tareas, Set<Integer> tareasCompletadas) {
        if (tareas == null || tareas.isEmpty()) {
            return "";
        }
        
        String[] lineasTareas = tareas.split("\n");
        StringBuilder tareasFormateadas = new StringBuilder();
        
        for (String linea : lineasTareas) {
            if (linea.trim().isEmpty()) continue;
            
            // Extraer n√∫mero de tarea
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("^(\\d+)\\.");
            java.util.regex.Matcher matcher = pattern.matcher(linea.trim());
            
            if (matcher.find()) {
                int numeroTarea = Integer.parseInt(matcher.group(1));
                boolean completada = tareasCompletadas.contains(numeroTarea);
                
                String estado = completada ? "‚úÖ" : "‚è≥";
                String estadoTexto = completada ? " **(COMPLETADA)**" : " (Pendiente)";
                
                tareasFormateadas.append(estado).append(" ").append(linea.trim()).append(estadoTexto).append("\n");
            } else {
                // Si no tiene n√∫mero, agregar como est√°
                tareasFormateadas.append("‚è≥ ").append(linea.trim()).append(" (Pendiente)").append("\n");
            }
        }
        
        return tareasFormateadas.toString().trim();
    }
    
    /**
     * Agrega una nueva tarea a las tareas existentes en la sesi√≥n
     */
    private String agregarNuevaTareaASesion(String nuevaTarea, String sessionId) {
        logger.info("‚ûï Agregando nueva tarea a sesi√≥n {}: {}", sessionId, nuevaTarea);
        
        // Verificar que hay un proyecto en la sesi√≥n
        String nombreProyecto = nombreProyectoSesion.get(sessionId);
        if (nombreProyecto == null || nombreProyecto.isEmpty()) {
            return "‚ùå **Error:** No hay proyecto definido en esta sesi√≥n.\n\n" +
                   "üí° Primero debes crear un proyecto usando la **opci√≥n 1**.\n\n" +
                   "MOSTRAR_MENU_PRINCIPAL";
        }
        
        // Obtener tareas existentes
        String tareasExistentes = tareasProyectoSesion.get(sessionId);
        
        // Calcular el n√∫mero de la nueva tarea
        int numeroNuevaTarea = 1;
        if (tareasExistentes != null && !tareasExistentes.isEmpty()) {
            numeroNuevaTarea = contarTareas(tareasExistentes) + 1;
        }
        
        // Formatear la nueva tarea
        String tareaFormateada = String.format("%d. %s", numeroNuevaTarea, nuevaTarea);
        
        // Agregar la nueva tarea a las existentes
        String tareasActualizadas;
        if (tareasExistentes != null && !tareasExistentes.isEmpty()) {
            tareasActualizadas = tareasExistentes + "\n" + tareaFormateada;
        } else {
            tareasActualizadas = tareaFormateada;
        }
        
        // Guardar las tareas actualizadas en la sesi√≥n
        tareasProyectoSesion.put(sessionId, tareasActualizadas);
        
        logger.info("‚úÖ Nueva tarea agregada. Total de tareas en sesi√≥n {}: {}", sessionId, contarTareas(tareasActualizadas));
        
        return String.format(
            "‚úÖ **TAREA AGREGADA EXITOSAMENTE**\n\n" +
            "üìã **Proyecto:** %s\n" +
            "‚ûï **Nueva tarea #%d:** %s\n\n" +
            "üìä **Total de tareas:** %d\n\n" +
            "**Lista actualizada:**\n%s\n\n" +
            "üí° **Puedes:**\n" +
            "‚Ä¢ Seleccionar **'2. Crear tareas'** para agregar otra tarea\n" +
            "‚Ä¢ Seleccionar **'3. Consultar tareas'** para ver todas las tareas\n" +
            "‚Ä¢ Continuar con tu proyecto\n\n" +
            "MOSTRAR_MENU_PRINCIPAL",
            nombreProyecto, numeroNuevaTarea, nuevaTarea, contarTareas(tareasActualizadas), tareasActualizadas
        );
    }
    
    /**
     * Marca una tarea como completada en la sesi√≥n
     */
    private String marcarTareaComoCompletada(int numeroTarea, String sessionId) {
        logger.info("üéØ Marcando tarea #{} como completada en sesi√≥n: {}", numeroTarea, sessionId);
        
        // Verificar que hay un proyecto en la sesi√≥n
        String nombreProyecto = nombreProyectoSesion.get(sessionId);
        if (nombreProyecto == null || nombreProyecto.isEmpty()) {
            return "‚ùå **Error:** No hay proyecto definido en esta sesi√≥n.\n\n" +
                   "üí° Primero debes crear un proyecto usando la **opci√≥n 1**.\n\n" +
                   "MOSTRAR_MENU_PRINCIPAL";
        }
        
        // Verificar que hay tareas en la sesi√≥n
        String tareasGuardadas = tareasProyectoSesion.get(sessionId);
        if (tareasGuardadas == null || tareasGuardadas.isEmpty()) {
            return "‚ùå **Error:** No hay tareas definidas en esta sesi√≥n.\n\n" +
                   "üí° Primero debes crear tareas usando la **opci√≥n 1** o **opci√≥n 2**.\n\n" +
                   "MOSTRAR_MENU_PRINCIPAL";
        }
        
        // Validar que el n√∫mero de tarea existe
        int totalTareas = contarTareas(tareasGuardadas);
        if (numeroTarea < 1 || numeroTarea > totalTareas) {
            return String.format(
                "‚ùå **Error:** N√∫mero de tarea inv√°lido.\n\n" +
                "üí° **Tareas disponibles:** del 1 al %d\n" +
                "üìù **Tu entrada:** %d\n\n" +
                "Por favor, ingresa un n√∫mero v√°lido entre 1 y %d.\n\n" +
                "MOSTRAR_MENU_PRINCIPAL",
                totalTareas, numeroTarea, totalTareas
            );
        }
        
        // Obtener tareas completadas para esta sesi√≥n
        Set<Integer> tareasCompletadas = tareasCompletadasSesion.computeIfAbsent(sessionId, k -> new HashSet<>());
        
        // Verificar si la tarea ya est√° completada
        if (tareasCompletadas.contains(numeroTarea)) {
            return String.format(
                "‚ÑπÔ∏è **TAREA YA COMPLETADA**\n\n" +
                "üìã **Proyecto:** %s\n" +
                "‚úÖ **Tarea #%d** ya estaba marcada como completada.\n\n" +
                "üí° **Estado actual:** Esta tarea ya se encuentra en tu lista de tareas completadas.\n\n" +
                "üîÑ **Puedes:**\n" +
                "‚Ä¢ Seleccionar **'3. Consultar tareas'** para ver el estado de todas las tareas\n" +
                "‚Ä¢ Marcar otra tarea como completada\n" +
                "‚Ä¢ Continuar con tu proyecto\n\n" +
                "MOSTRAR_MENU_PRINCIPAL",
                nombreProyecto, numeroTarea
            );
        }
        
        // Extraer el texto de la tarea espec√≠fica
        String textoTarea = extraerTextoTarea(tareasGuardadas, numeroTarea);
        
        // Marcar la tarea como completada
        tareasCompletadas.add(numeroTarea);
        
        // Calcular estad√≠sticas
        int tareasCompletadasCount = tareasCompletadas.size();
        double porcentajeProgreso = (tareasCompletadasCount * 100.0) / totalTareas;
        
        logger.info("‚úÖ Tarea #{} marcada como completada. Progreso: {}/{} ({}%) para proyecto '{}' en sesi√≥n: {}", 
                   numeroTarea, tareasCompletadasCount, totalTareas, String.format("%.1f", porcentajeProgreso), nombreProyecto, sessionId);
        
        return String.format(
            "üéâ **TAREA COMPLETADA EXITOSAMENTE**\n\n" +
            "üìã **Proyecto:** %s\n" +
            "‚úÖ **Tarea #%d completada:** %s\n\n" +
            "üìä **Progreso actualizado:**\n" +
            "‚Ä¢ **Completadas:** %d/%d tareas (%.1f%%)\n" +
            "‚Ä¢ **Pendientes:** %d tareas\n\n" +
            "üéØ **¬°Excelente trabajo!** Has completado una tarea m√°s de tu proyecto.\n\n" +
            "üí° **Puedes:**\n" +
            "‚Ä¢ Seleccionar **'3. Consultar tareas'** para marcar otra tarea como completada\n" +
            "‚Ä¢ Seleccionar **'2. Crear tareas'** para agregar nuevas tareas\n" +
            "‚Ä¢ Continuar trabajando en tu proyecto\n\n" +
            "MOSTRAR_MENU_PRINCIPAL",
            nombreProyecto, numeroTarea, textoTarea,
            tareasCompletadasCount, totalTareas, porcentajeProgreso,
            totalTareas - tareasCompletadasCount
        );
    }
    
    /**
     * Extrae el texto de una tarea espec√≠fica por su n√∫mero
     */
    private String extraerTextoTarea(String tareas, int numeroTarea) {
        if (tareas == null || tareas.isEmpty()) {
            return "Descripci√≥n no disponible";
        }
        
        String[] lineasTareas = tareas.split("\n");
        
        for (String linea : lineasTareas) {
            if (linea.trim().isEmpty()) continue;
            
            // Buscar l√≠nea que comience con el n√∫mero de tarea
            java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("^" + numeroTarea + "\\. (.+)");
            java.util.regex.Matcher matcher = pattern.matcher(linea.trim());
            
            if (matcher.find()) {
                return matcher.group(1); // Devolver solo el texto sin el n√∫mero
            }
        }
        
        return "Tarea #" + numeroTarea;
    }
}